openapi: 3.0.3
info:
  title: Motorsport App API
  description: API для автоспортивной социальной сети для организаторов и зрителей
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Локальный сервер

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [SPECTATOR, PILOT, ORGANIZER]
        avatarUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
      required:
        - username
        - email
        - role

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        status:
          type: string
          enum: [UPCOMING, ONGOING, FINISHED]
      required:
        - title
        - date
        - location

    News:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        authorId:
          type: string
          format: uuid
        authorName:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - content
        - authorId

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT-токен для авторизации

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer

paths:
  /auth/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: "john_doe"
              email: "john@example.com"
              password: "password123"
              role: "SPECTATOR"
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Вход в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john@example.com"
              password: "password123"
      responses:
        '200':
          description: Успешный вход, возвращает JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events:
    get:
      summary: Получение списка событий
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Список событий
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  total:
                    type: integer
      security:
        - bearerAuth: []

    post:
      summary: Создание нового события (только для ORGANIZER)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              title: "Drift Championship 2025"
              date: "2025-03-15T10:00:00Z"
              location: "Moscow Raceway"
      responses:
        '201':
          description: Событие создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '403':
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /news:
    get:
      summary: Получение ленты новостей
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Список новостей
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/News'
                  total:
                    type: integer
      security:
        - bearerAuth: []

    post:
      summary: Публикация новости (только для ORGANIZER или PILOT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
            example:
              content: "Регистрация на чемпионат открыта!"
      responses:
        '201':
          description: Новость опубликована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /profiles/{id}:
    get:
      summary: Получение профиля пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /profiles/me:
    put:
      summary: Обновление собственного профиля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: "john_doe_updated"
              avatarUrl: "http://example.com/avatar.jpg"
              bio: "Люблю дрифт и скорость"
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /messenger:
    get:
      summary: Заглушка для мессенджера
      responses:
        '200':
          description: Функционал в разработке
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "coming soon"
      security:
        - bearerAuth: []

  /top32:
    get:
      summary: Заглушка для сетки топ-32
      responses:
        '200':
          description: Функционал в разработке
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "coming soon"
      security:
        - bearerAuth: []
